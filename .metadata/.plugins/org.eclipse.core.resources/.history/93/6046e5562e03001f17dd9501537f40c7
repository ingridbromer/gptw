package com.gptw.config;
import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import com.gptw.model.dto.EmployeeDTO;

@Configuration
public class KafkaProducerConfig {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Value("${app.output-kafka-topic}")
    private String outputKafkaTopic;

    @Value("${app.kafka-topic-num-partitions}")
    private int kafkaTopicNumPartitions;

    @Value("${app.kafka-topic-replication-factor}")
    private short kafkaTopicReplicationFactor;
    
    @Value("${security.jwt.token.secret-key:secret}")
	private String secretKey = "secret";

    @Bean
    Map<String, Object> producerConfigs() {
        Map<String, Object> props = new HashMap<>();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class); // Alterado para JsonSerializer
        return props;
    }

    @Bean
    ProducerFactory<String, EmployeeDTO> producerFactory() {
        return new DefaultKafkaProducerFactory<>(producerConfigs());
    }

    @Bean
    KafkaTemplate<String, EmployeeDTO> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }

    @Bean
    NewTopic topic() {
        return new NewTopic(outputKafkaTopic, kafkaTopicNumPartitions, kafkaTopicReplicationFactor);
    }
}
