package com.gptw.service;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Service;

import com.gptw.model.Employee;

@Service
public class ServiceCSV {

	public List<Employee> readCSV(String filePath) {
		List<Employee> employees = new ArrayList<>();

		try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
			String line;
			boolean headerSkipped = false; // Flag para pular o cabeçalho do arquivo CSV

			while ((line = br.readLine()) != null) {
				if (!headerSkipped) {
					// Pular o cabeçalho
					headerSkipped = true;
					continue;
				}

				// Dividir a linha em campos usando a vírgula como separador
				String[] fields = line.split(",");

				// Criar um novo objeto Employee e preencher seus campos
				Employee employee = new Employee();
				employee.setId(UUID.randomUUID()); // Geração de um UUID aleatório
				employee.setName(fields[0].trim());
				employee.setEmail(fields[1].trim());
				employee.setDepartment(fields[2].trim());
				employee.setSalary(Long.parseLong(fields[3].trim()));
				employee.setBirthDate(LocalDate.parse(fields[4].trim()));

				// Adicionar o funcionário à lista
				employees.add(employee);
			}
		} catch (IOException e) {
			e.printStackTrace(); // Lidar com a exceção de leitura do arquivo
		}

		return employees;
	}

	// Método main para teste
	public static void main(String[] args) {
		ServiceCSV csvReader = new ServiceCSV();
		List<Employee> employees = csvReader.readCSV("caminho/do/seu/arquivo.csv");

		// Exibindo os funcionários lidos do CSV
		for (Employee employee : employees) {
			System.out.println(employee);
		}
	}
}
